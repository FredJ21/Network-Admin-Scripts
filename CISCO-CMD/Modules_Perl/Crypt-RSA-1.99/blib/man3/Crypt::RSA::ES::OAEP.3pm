.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::RSA::ES::OAEP 3"
.TH Crypt::RSA::ES::OAEP 3 "2009-06-07" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::RSA::ES::OAEP \- Plaintext\-aware encryption with RSA.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $oaep = new Crypt::RSA::ES::OAEP; 
\&
\&    my $ct = $oaep\->encrypt( Key => $key, Message => $message ) || 
\&                die $oaep\->errstr; 
\&
\&    my $pt = $oaep\->decrypt( Key => $key, Cyphertext => $ct )   || 
\&                die $oaep\->errstr;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements Optimal Asymmetric Encryption, a plaintext-aware
encryption scheme based on \s-1RSA.\s0 The notion of plaintext-aware implies it's
computationally infeasible to obtain full or partial information about a
message from a cyphertext, and computationally infeasible to generate a
valid cyphertext without knowing the corresponding message.
Plaintext-aware schemes, such as \s-1OAEP,\s0 are semantically secure,
non-malleable and secure against chosen-ciphertext attack. For more
information on \s-1OAEP\s0 and plaintext-aware encryption, see [3], [9] & [13].
.SH "METHODS"
.IX Header "METHODS"
.SS "\fB\fP\f(BInew()\fP\fB\fP"
.IX Subsection "new()"
Constructor.
.SS "\fB\fP\f(BIversion()\fP\fB\fP"
.IX Subsection "version()"
Returns the version number of the module.
.SS "\fB\fP\f(BIencrypt()\fP\fB\fP"
.IX Subsection "encrypt()"
Encrypts a string with a public key and returns the encrypted string
on success. \fIencrypt()\fR takes a hash argument with the following
mandatory keys:
.IP "\fBMessage\fR" 4
.IX Item "Message"
A string to be encrypted. The length of this string should not exceed k\-42
octets, where k is the octet length of the \s-1RSA\s0 modulus. If Message is
longer than k\-42, the method will fail and set \f(CW$self\fR\->errstr to \*(L"Message
too long.\*(R" This means the key must be at least _336_ bits long if you are
to use \s-1OAEP.\s0
.IP "\fBKey\fR" 4
.IX Item "Key"
Public key of the recipient, a Crypt::RSA::Key::Public object.
.SS "\fB\fP\f(BIdecrypt()\fP\fB\fP"
.IX Subsection "decrypt()"
Decrypts cyphertext with a private key and returns plaintext on
success. \f(CW$self\fR\->errstr is set to \*(L"Decryption Error.\*(R" or appropriate
error on failure. \fIdecrypt()\fR takes a hash argument with the following
mandatory keys:
.IP "\fBCyphertext\fR" 4
.IX Item "Cyphertext"
A string encrypted with \fIencrypt()\fR. The length of the cyphertext must be k
octets, where k is the length of the \s-1RSA\s0 modulus.
.IP "\fBKey\fR" 4
.IX Item "Key"
Private key of the receiver, a Crypt::RSA::Key::Private object.
.IP "\fBVersion\fR" 4
.IX Item "Version"
Version of the module that was used for creating the Cyphertext. This is
an optional argument. When present, \fIdecrypt()\fR will ensure before
proceeding that the installed version of the module can successfully
decrypt the Cyphertext.
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
See \s-1ERROR HANDLING\s0 in \fICrypt::RSA\fR\|(3) manpage.
.SH "BIBLIOGRAPHY"
.IX Header "BIBLIOGRAPHY"
See \s-1BIBLIOGRAPHY\s0 in \fICrypt::RSA\fR\|(3) manpage.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vipul Ved Prakash, <mail@vipul.net>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fICrypt::RSA\fR\|(3), \fICrypt::RSA::Primitives\fR\|(3), \fICrypt::RSA::Keys\fR\|(3),
\&\fICrypt::RSA::SSA::PSS\fR\|(3)
