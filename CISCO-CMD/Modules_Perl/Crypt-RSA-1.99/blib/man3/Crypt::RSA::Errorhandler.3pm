.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::RSA::Errorhandler 3"
.TH Crypt::RSA::Errorhandler 3 "2009-06-07" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::RSA::Errorhandler \- Error handling mechanism for Crypt::RSA.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package Foo;
\&
\&    use Crypt::RSA::Errorhandler;
\&    @ISA = qw(Crypt::RSA::Errorhandler);
\&    
\&    sub alive { 
\&        ..
\&        ..
\&        return 
\&        $self\->error ("Awake, awake! Ring the alarum bell. \e
\&                       Murther and treason!", $dagger) 
\&            if $self\->murdered($king);
\&    }
\&
\&
\&    package main; 
\&
\&    use Foo;
\&    my $foo = new Foo;
\&    $foo\->alive($king) or print $foo\->errstr(); 
\&        # prints "Awake, awake! ... "
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Crypt::RSA::Errorhandler encapsulates the error handling mechanism used
by the modules in Crypt::RSA bundle. Crypt::RSA::Errorhandler doesn't
have a constructor and is meant to be inherited. The derived modules use
its two methods, \fIerror()\fR and \fIerrstr()\fR, to communicate error messages to
the caller.
.PP
When a method of the derived module fails, it calls \f(CW$self\fR\->\fIerror()\fR and
returns undef to the caller. The error message passed to \fIerror()\fR is made
available to the caller through the \fIerrstr()\fR accessor. \fIerror()\fR also
accepts a list of sensitive data that it wipes out (undef'es) before
returning.
.PP
The caller should \fBnever\fR call \fIerrstr()\fR to check for errors. \fIerrstr()\fR
should be called only when a method indicates (usually through an undef
return value) that an error has occured. This is because \fIerrstr()\fR is
never overwritten and will always contain a value after the occurance of
first error.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fB\f(BInew()\fB\fR" 4
.IX Item "new()"
Barebones constructor.
.ie n .IP "\fBerror($mesage, ($wipeme, \fB$wipemetoo\fB))\fR" 4
.el .IP "\fBerror($mesage, ($wipeme, \f(CB$wipemetoo\fB))\fR" 4
.IX Item "error($mesage, ($wipeme, $wipemetoo))"
The first argument to \fIerror()\fR is \f(CW$message\fR which is placed in \f(CW$self\fR\-
>{errstr} and the remaining arguments are interpretted as
variables containing sensitive data that are wiped out from the
memory. \fIerror()\fR always returns undef.
.IP "\fB\f(BIerrstr()\fB\fR" 4
.IX Item "errstr()"
\&\fIerrstr()\fR is an accessor method for \f(CW$self\fR\->{errstr}.
.IP "\fB\f(BIerrstrrst()\fB\fR" 4
.IX Item "errstrrst()"
This method sets \f(CW$self\fR\->{errstr} to an empty string.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vipul Ved Prakash, <mail@vipul.net>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fICrypt::RSA\fR\|(3)
