.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::RSA::Key::Private 3"
.TH Crypt::RSA::Key::Private 3 "2009-06-07" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::RSA::Key::Private \-\- RSA Private Key Management.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    $key = new Crypt::RSA::Key::Private (
\&                Identity => \*(AqLord Banquo <banquo@lochaber.com>\*(Aq,
\&                Password => \*(AqThe earth hath bubbles\*(Aq,
\&           );
\&
\&    $key\->hide();
\&
\&    $key\->write( Filename => \*(Aqrsakeys/banquo.private\*(Aq  );
\&
\&    $akey = new Crypt::RSA::Key::Private (
\&                 Filename => \*(Aqrsakeys/banquo.private\*(Aq
\&                );   
\&
\&    $akey\->reveal ( Password => \*(AqThe earth hath bubbles\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Crypt::RSA::Key::Private provides basic private key management
functionality for Crypt::RSA private keys. Following methods are
available:
.IP "\fB\f(BInew()\fB\fR" 4
.IX Item "new()"
The constructor. Takes a hash, usually with two arguments: \f(CW\*(C`Filename\*(C'\fR and
\&\f(CW\*(C`Password\*(C'\fR. \f(CW\*(C`Filename\*(C'\fR indicates a file from which the private key
should be read. More often than not, private keys are kept encrypted with
a symmetric cipher and \s-1MUST\s0 be decrypted before use. When a \f(CW\*(C`Password\*(C'\fR
argument is provided, the key is also decrypted before it is returned by
\&\f(CW\*(C`new()\*(C'\fR. Here's a complete list of arguments accepted by \f(CW\*(C`new()\*(C'\fR (all of
which are optional):
.RS 4
.IP "Identity" 4
.IX Item "Identity"
A string identifying the owner of the key. Canonically, a name and
email address.
.IP "Filename" 4
.IX Item "Filename"
Name of the file that contains the private key.
.IP "Password" 4
.IX Item "Password"
Password with which the private key is encrypted, or should be encrypted
(in case of a new key).
.IP "Cipher" 4
.IX Item "Cipher"
Name of the symmetric cipher in which the private key is encrypted (or
should be encrypted). The default is \*(L"Blowfish\*(R" and possible values
include \s-1DES, IDEA,\s0 Twofish and other ciphers supported by Crypt::CBC.
.RE
.RS 4
.RE
.IP "\fB\f(BIreveal()\fB\fR" 4
.IX Item "reveal()"
If the key is not decrypted at \f(CW\*(C`new()\*(C'\fR, it can be decrypted by
calling \f(CW\*(C`reveal()\*(C'\fR with a \f(CW\*(C`Password\*(C'\fR argument.
.IP "\fB\f(BIhide()\fB\fR" 4
.IX Item "hide()"
\&\f(CW\*(C`hide()\*(C'\fR causes the key to be encrypted by the chosen symmetric cipher
and password.
.IP "\fB\f(BIwrite()\fB\fR" 4
.IX Item "write()"
Causes the key to be written to a disk file specified by the
\&\f(CW\*(C`Filename\*(C'\fR argument. \f(CW\*(C`write()\*(C'\fR will call \f(CW\*(C`hide()\*(C'\fR before
writing the key to disk. If you wish to store the key in plain,
don't specify a password at \f(CW\*(C`new()\*(C'\fR.
.IP "\fB\f(BIread()\fB\fR" 4
.IX Item "read()"
Causes the key to be read from a disk file specified by
\&\f(CW\*(C`Filename\*(C'\fR into the object. If \f(CW\*(C`Password\*(C'\fR is provided, the
method automatically calls \fIreveal()\fR to decrypt the key.
.IP "\fB\f(BIserialize()\fB\fR" 4
.IX Item "serialize()"
Creates a \fIData::Dumper\fR\|(3) serialization of the private key and
returns the string representation.
.IP "\fB\f(BIdeserialize()\fB\fR" 4
.IX Item "deserialize()"
Accepts a serialized key under the \f(CW\*(C`String\*(C'\fR parameter and
coverts it into the perl representation stored in the object.
.ie n .IP """check()""" 4
.el .IP "\f(CWcheck()\fR" 4
.IX Item "check()"
Check the consistency of the key. If the key checks out, it sets
\&\f(CW$self\fR\->{Checked} = 1. Returns undef on failure.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vipul Ved Prakash, <mail@vipul.net>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fICrypt::RSA::Key\fR\|(3), \fICrypt::RSA::Public\fR\|(3)
