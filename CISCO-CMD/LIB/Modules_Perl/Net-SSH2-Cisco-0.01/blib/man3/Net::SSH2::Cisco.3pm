.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH2::Cisco 3"
.TH Net::SSH2::Cisco 3 "2015-07-11" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSH2::Cisco \- interact with a Cisco router via SSH
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::SSH2::Cisco;
\&
\&  my $session = Net::SSH2::Cisco\->new(host => \*(Aq123.123.123.123\*(Aq);
\&  $session\->login(\*(Aqlogin\*(Aq, \*(Aqpassword\*(Aq);
\&
\&  # Execute a command
\&  my @output = $session\->cmd(\*(Aqshow version\*(Aq);
\&  print @output;
\&
\&  # Enable mode
\&  if ($session\->enable("enable_password") ) {
\&      @output = $session\->cmd(\*(Aqshow privilege\*(Aq);
\&      print "My privileges: @output\en";
\&  } else {
\&      warn "Can\*(Aqt enable: " . $session\->errmsg;
\&  }
\&
\&  $session\->close;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::SSH2::Cisco provides additional functionality to Net::SSH2
for dealing with Cisco routers in much the same way Net::Telnet::Cisco
enhances Net::Telnet.  In fact, this module borrows \fBheavily\fR from
both of those excellent modules.
.PP
This module is basically a cut/paste of:
.IP "\(bu" 2
70% Net::Telnet
.IP "\(bu" 2
20% Net::Telnet::Cisco
.IP "\(bu" 2
5% Net::SSH2(::Channel)
.IP "\(bu" 2
5% original hack to make it all work together
.PP
I tried many ways first:
.IP "\(bu" 2
Create a child class of Net::SSH2 to no avail due to the C\-type 
inside-out object it returns and my lack of experience.
.IP "\(bu" 2
Pass a Net::SSH2(::Channel) connetion to Net::Telnet(::Cisco) \fIfhopen()\fR
method, but it returned:
.Sp
\&\f(CW\*(C`Not a GLOB reference at [...]/perl/vendor/lib/Net/Telnet.pm line 679.\*(C'\fR
.IP "\(bu" 2
Use Net::Telnet in \f(CW@ISA\fR with \f(CW\*(C`AUTOLOAD\*(C'\fR to leverage the accessors and 
code already written, but I'm not creating a Net::Telnet object and 
I couldn't get it to work.
.PP
That left me the \fI(?only?)\fR option \- to write this Franken-module \*(L"liberally
borrowing\*(R" from much smarter, more talented programmers than I.
.PP
Why Net::SSH2?  Because it's the only \s-1SSH\s0 module on \s-1CPAN\s0 that works for me.
.IP "\(bu" 2
\&\fBNet::SSH::Perl\fR \- too many dependencies making it too difficult to install;
especially on Windows.
.IP "\(bu" 2
\&\fBNet::OpenSSH\fR \- does not work on Windows (partial success).
.IP "\(bu" 2
\&\fBControl::CLI\fR \- does a great job of being a parent to Net::SSH2 and
Net::Telnet.  Unfortunately, not Net::Telnet::Cisco, so no Cisco-specific 
enhancements.
.IP "\(bu" 2
\&\fBNet::Appliance::Session\fR \- seemed promising, but has more dependencies
than Net::SSH::Perl; no go.
.PP
\&\fBNet::SSH2\fR comes bundled in vendor\elib with Strawberry Perl distributions
and I've heard no complaints on Perl boards about use on *nix; so we're
ready to go!
.SH "CAVEATS"
.IX Header "CAVEATS"
Before you use Net::SSH2::Cisco, you should have a good
understanding of Net::SSH2, Net::Telnet and Net::Telnet::Cisco, so read
their documentation first, and then come back here.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew\fR \- create new Net::SSH2::Cisco object" 4
.IX Item "new - create new Net::SSH2::Cisco object"
.Vb 10
\&    $obj = Net::SSH2::Cisco\->new(
\&        [Always_waitfor_prompt   => $mode,]       # 1
\&        [Autopage                => $mode,]       # 1
\&        [Binmode                 => $mode,]       # 0
\&        [Blocking                => $mode,]       # 0
\&        [Cmd_remove_mode         => $mode,]       # "auto"
\&        [Dump_Log                => $file,]       # \*(Aq\*(Aq
\&        [Family                  => $family,]     # "ipv4"
\&        [Fhopen                  => $filehandle,]
\&        [Host                    => $host,]       # "localhost"
\&        [Ignore_warnings         => $mode,]       # 0
\&        [Input_log               => $file,]       # \*(Aq\*(Aq
\&        [Input_record_separator  => $char,]       # "\en"
\&        [Max_buffer_length       => $len,]        # 1,048,576 bytes (i.e., 1MB)
\&        [More_prompt             => $matchop,]    # \*(Aq/(?m:^\es*\-\-More\-\-)/\*(Aq,
\&        [Output_field_separator  => $chars,]      # ""
\&        [Output_log              => $file,]       # \*(Aq\*(Aq
\&        [Output_record_separator => $char,]       # "\en"
\&        [Port                    => $port,]       # 22
\&        [Prompt                  => $matchop,]    # \*(Aq/(?m:^(?:[\ew.\e/]+\e:)?[\ew.\-]+\es?(?:\e(config[^\e)]*\e))?\es?[\e$#>]\es?(?:\e(enable\e))?\es*$)/\*(Aq
\&        [Send_wakeup             => $when,]       # 0
\&        [Timeout                 => $secs,]       # 10
\&        [Waitfor_clear           => $mode,]       # 0
\&        [Waitfor_pause           => $millisecs,]  # 0.2
\&    );
.Ve
.Sp
This is the constructor for Net::SSH2::Cisco objects.  A new object is
returned on success, failure returns undefined.  The optional arguments
are short-cuts to methods of the same name.
.Sp
If the \fI\f(CI$host\fI\fR argument is given then the object is opened by
connecting to \s-1TCP \s0\fI\f(CI$port\fI\fR on \fI\f(CI$host\fI\fR.  Also see \f(CW\*(C`connect()\*(C'\fR.  The new
object returned is given the defaults listed above.
.IP "\fBalways_waitfor_prompt\fR \- waitfor and cmd prompt behaviour" 4
.IX Item "always_waitfor_prompt - waitfor and cmd prompt behaviour"
.Vb 1
\&    $mode = $obj\->always_waitfor_prompt;
\&
\&    $mode = $obj\->always_waitfor_prompt($mode);
.Ve
.Sp
If you pass a Prompt argument to \fIcmd()\fR or \fIwaitfor()\fR a String or Match,
they will return control on a successful match of your argument(s) or
the default prompt. Set always_waitfor_prompt to 0 to return control
only for your arguments.
.Sp
This method has no effect on \fIlogin()\fR. \fIlogin()\fR will always wait for a
prompt.
.IP "\fBautopage\fR \- Turn autopaging on and off" 4
.IX Item "autopage - Turn autopaging on and off"
.Vb 1
\&    $mode = $obj\->autopage;
\&
\&    $mode = $obj\->autopage($mode);
.Ve
.Sp
\&\s-1IOS\s0 pages output by default. It expects human eyes to be reading the
output, not programs.  Humans hit the spacebar to scroll page by
page so \fIautopage()\fR mimicks that behaviour.  This is the slow way to
handle paging.  Consider sending \*(L"terminal length 0\*(R" as the first \f(CW\*(C`cmd()\*(C'\fR.
.IP "\fBbinmode\fR \- toggle newline translation" 4
.IX Item "binmode - toggle newline translation"
.Vb 1
\&    $mode = $obj\->binmode;
\&
\&    $mode = $obj\->binmode($mode);
.Ve
.Sp
This method controls whether or not to enable \f(CW\*(C`binmode\*(C'\fR on the
underlying Net::SSH2::Channel object created in \f(CW\*(C`connect()\*(C'\fR.
.Sp
If no argument is given, the current mode is returned.
.IP "\fBblocking\fR \- toggle channel blocking" 4
.IX Item "blocking - toggle channel blocking"
.Vb 1
\&    $mode = $obj\->blocking;
\&
\&    $mode = $obj\->blocking($mode);
.Ve
.Sp
This method controls whether or not to enable \f(CW\*(C`blocking\*(C'\fR on the
underlying Net::SSH2::Channel object created in \f(CW\*(C`connect()\*(C'\fR.
.Sp
If no argument is given, the current mode is returned.
.IP "\fBclose\fR \- close object" 4
.IX Item "close - close object"
.Vb 1
\&    $ok = $obj\->close;
.Ve
.Sp
This method closes the object.
.IP "\fBcmd\fR \- issue command and retrieve output" 4
.IX Item "cmd - issue command and retrieve output"
.Vb 10
\&    $ok = $obj\->cmd($string);
\&    $ok = $obj\->cmd(
\&         String  => $string,
\&        [Output  => $ref,]
\&        [Cmd_remove_mode => $mode,]
\&        [Errmode => $mode,]
\&        [Input_record_separator  => $chars,]
\&        [Output_record_separator => $chars,]
\&        [Prompt  => $match,]
\&        [Timeout => $secs,]
\&        [Waitfor_clear => $mode,]
\&        [Waitfor_pause => $millisecs,]
\&    );
\&
\&    @output = $obj\->cmd($string);
\&    @output = $obj\->cmd(
\&         String  => $string,
\&        [Output  => $ref,]
\&        [Cmd_remove_mode => $mode,]
\&        [Errmode => $mode,]
\&        [Input_record_separator  => $chars,]
\&        [Output_record_separator => $chars,]
\&        [Prompt  => $match,]
\&        [Timeout => $secs,]
\&        [Waitfor_clear => $mode,]
\&        [Waitfor_pause => $millisecs,]
\&    );
.Ve
.Sp
This method sends the command \fI\f(CI$string\fI\fR, and reads the characters
sent back by the command up until and including the matching prompt.
It's assumed that the program to which you're sending is some kind of
command prompting interpreter such as a shell.
.Sp
The command \fI\f(CI$string\fI\fR is automatically appended with the
output_record_separator, by default it is \f(CW"\en"\fR.  This is similar
to someone typing a command and hitting the return key.  Set the
output_record_separator to change this behavior.
.Sp
In a scalar context, the characters read from the remote side are
discarded and \f(CW1\fR is returned on success.  On time-out, eof, or other
failures, the error mode action is performed.  See \f(CW\*(C`errmode()\*(C'\fR.
.Sp
In a list context, just the output generated by the command is
returned, one line per element.  In other words, all the characters in
between the echoed back command string and the prompt are returned.
If the command happens to return no output, a list containing one
element, the empty string is returned.  This is so the list will
indicate true in a boolean context.  On time-out, eof, or other
failures, the error mode action is performed.  See \f(CW\*(C`errmode()\*(C'\fR.
.Sp
The characters that matched the prompt may be retrieved using
\&\f(CW\*(C`last_prompt()\*(C'\fR.
.Sp
Many command interpreters echo back the command sent.  In most
situations, this method removes the first line returned from the
remote side (i.e. the echoed back command).  See \f(CW\*(C`cmd_remove_mode()\*(C'\fR
for more control over this feature.
.Sp
The \fIOutput\fR named parameter provides an alternative method of
receiving command output.  If you pass a scalar reference, all the
output (even if it contains multiple lines) is returned in the
referenced scalar.  If you pass an array or hash reference, the lines
of output are returned in the referenced array or hash.  You can use
\&\f(CW\*(C`input_record_separator()\*(C'\fR to change the notion of what separates a
line.
.IP "\fBcmd_remove_mode\fR \- toggle removal of echoed commands" 4
.IX Item "cmd_remove_mode - toggle removal of echoed commands"
.Vb 1
\&    $mode = $obj\->cmd_remove_mode;
\&
\&    $mode = $obj\->cmd_remove_mode($mode);
.Ve
.Sp
This method controls how to deal with echoed back commands in the
output returned by \fIcmd()\fR.  Typically, when you send a command to the
remote side, the first line of output returned is the command echoed
back.  Use this mode to remove the first line of output normally
returned by \fIcmd()\fR.
.Sp
If no argument is given, the current mode is returned.
.Sp
If \fI\f(CI$mode\fI\fR is \f(CW0\fR then the command output returned from \fIcmd()\fR has no
lines removed.  If \fI\f(CI$mode\fI\fR is a positive integer, then the first
\&\fI\f(CI$mode\fI\fR lines of command output are stripped.
.Sp
By default, \fI\f(CI$mode\fI\fR is set to \f(CW"auto"\fR.  Auto means that whether or
not the first line of command output is stripped, depends on whether
or not it is matched in the first line of command output.
.IP "\fBconnect\fR \- connect to port on remote host" 4
.IX Item "connect - connect to port on remote host"
.Vb 1
\&    $ok = $obj\->connect($host);
\&
\&    $ok = $obj\->connect(
\&        [Fhopen  => $filehandle,]
\&        [Host    => $host,]
\&        [Port    => $port,]
\&        [Family  => $family,]
\&        [Timeout => $secs,]
\&    );
.Ve
.Sp
This method opens a \s-1TCP\s0 connection to \fI\f(CI$port\fI\fR on \fI\f(CI$host\fI\fR for the \s-1IP\s0
address \fI\f(CI$family\fI\fR.  If \f(CW$filehandle\fR is provided, other options are
ignored.  If any of the arguments are missing then the current attribute
value for the object is used.  Specifing any optional named parameters
overrides the current setting for this call to \f(CW\*(C`connect()\*(C'\fR.
.Sp
This essentially performs a Net::SSH2 \f(CW\*(C`connect()\*(C'\fR call.
.IP "\fBdisable\fR \- leave enabled mode" 4
.IX Item "disable - leave enabled mode"
.Vb 1
\&    $ok = $obj\->disable;
.Ve
.Sp
This method exits the router's privileged mode.
.IP "\fBdump_log\fR \- log all I/O in dump format" 4
.IX Item "dump_log - log all I/O in dump format"
.Vb 1
\&    $fh = $obj\->dump_log;
\&
\&    $fh = $obj\->dump_log($fh);
\&
\&    $fh = $obj\->dump_log($filename);
.Ve
.Sp
This method starts or stops dump format logging of all the object's
input and output.  The dump format shows the blocks read and written
in a hexadecimal and printable character format.  This method is
useful when debugging, however you might want to first try
\&\f(CW\*(C`input_log()\*(C'\fR as it's more readable.
.Sp
If no argument is given, the log filehandle is returned.  A returned
empty string indicates logging is off.
.Sp
To stop logging, use an empty string as an argument.  The stopped
filehandle is not closed.
.Sp
If an open filehandle is given, it is used for logging and returned.
Otherwise, the argument is assumed to be the name of a file, the
filename is opened for logging and a filehandle to it is returned.  If
the filehandle is not already opened or the filename can't be opened
for writing, the error mode action is performed.
.Sp
\&\fB\s-1NOTE:\s0\fR Logging starts \fIafter\fR login so the initial login sequence 
(i.e., banner, username and password exchange) is \fInot\fR captured.  This 
is due to Net::SSH2 not having a logging function.
.IP "\fBenable\fR \- enter enabled mode" 4
.IX Item "enable - enter enabled mode"
.Vb 1
\&    $ok = $obj\->enable;
\&
\&    $ok = $obj\->enable($password);
\&
\&    $ok = $obj\->enable(
\&        [Name => $name,]
\&        [Password => $password,]
\&        [Level => $level,]
\&    );
.Ve
.Sp
This method changes privilege level to enabled mode.
.Sp
If a single argument is provided by the caller, it will be used as
a password.  Returns 1 on success and undef on failure.
.IP "\fBeof\fR \- end of file indicator" 4
.IX Item "eof - end of file indicator"
.Vb 1
\&    $eof = $obj\->eof;
.Ve
.Sp
This method returns \f(CW1\fR if end of file has been read, otherwise it
returns an empty string.
.IP "\fBerrmode\fR \- define action to be performed on error" 4
.IX Item "errmode - define action to be performed on error"
.Vb 1
\&    $mode = $obj\->errmode;
\&
\&    $mode = $obj\->errmode($mode);
.Ve
.Sp
This method gets or sets the action used when errors are encountered
using the object.  The first calling sequence returns the current
error mode.  The second calling sequence sets it to \fI\f(CI$mode\fI\fR.  Valid values
for \fI\f(CI$mode\fI\fR are \f(CW"die"\fR (the default), \f(CW"return"\fR, a \fIcoderef\fR
or an \fIarrayref\fR.
.Sp
When mode is \f(CW"die"\fR and an error is encountered using the object,
then an error message is printed to standard error and the program
dies.
.Sp
When mode is \f(CW"return"\fR then the method generating the error places
an error message in the object and returns an undefined value in a
scalar context and an empty list in list context.  The error message
may be obtained using \f(CW\*(C`errmsg()\*(C'\fR.
.Sp
When mode is a \fIcoderef\fR, then when an error is encountered
\&\fIcoderef\fR is called with the error message as its first argument.
Using this mode you may have your own subroutine handle errors.  If
\&\fIcoderef\fR itself returns then the method generating the error returns
undefined or an empty list depending on context.
.Sp
When mode is an \fIarrayref\fR, the first element of the array must be a
\&\fIcoderef\fR.  Any elements that follow are the arguments to \fIcoderef\fR.
When an error is encountered, the \fIcoderef\fR is called with its
arguments.  Using this mode you may have your own subroutine handle
errors.  If the \fIcoderef\fR itself returns then the method generating
the error returns undefined or an empty list depending on context.
.Sp
A warning is printed to \s-1STDERR\s0 when attempting to set this attribute
to something that is not \f(CW"die"\fR, \f(CW"return"\fR, a \fIcoderef\fR, or an
\&\fIarrayref\fR whose first element isn't a \fIcoderef\fR.
.IP "\fBerrmsg\fR \- most recent error message" 4
.IX Item "errmsg - most recent error message"
.Vb 1
\&    $msg = $obj\->errmsg;
\&
\&    $msg = $obj\->errmsg(@msgs);
.Ve
.Sp
The first calling sequence returns the error message associated with
the object.  The empty string is returned if no error has been
encountered yet.  The second calling sequence sets the error message
for the object to the concatenation of \fI\f(CI@msgs\fI\fR.  Normally, error
messages are set internally by a method when an error is encountered.
.IP "\fBerror\fR \- perform the error mode action" 4
.IX Item "error - perform the error mode action"
.Vb 1
\&    $obj\->error(@msgs);
.Ve
.Sp
This method concatenates \fI\f(CI@msgs\fI\fR into a string and places it in the 
object as the error message.  Also see \f(CW\*(C`errmsg()\*(C'\fR.  It then performs 
the error mode action.  Also see \f(CW\*(C`errmode()\*(C'\fR.
.Sp
If the error mode doesn't cause the program to die, then an undefined 
value or an empty list is returned depending on the context.
.Sp
This method is primarily used by this class or a sub-class to perform 
the user requested action when an error is encountered.
.IP "\fBfamily\fR \- \s-1IP\s0 address family for remote host" 4
.IX Item "family - IP address family for remote host"
.Vb 1
\&    $family = $obj\->family;
\&
\&    $family = $obj\->family($family);
.Ve
.Sp
This method designates which \s-1IP\s0 address family \f(CW\*(C`host()\*(C'\fR refers to,
i.e. IPv4 or IPv6.  IPv6 support is available when using perl 5.14 or
later.  With no argument it returns the current value set in the
object.  With an argument it sets the current address family to
\&\fI\f(CI$family\fI\fR returns.  Valid values are \f(CW"ipv4"\fR or \f(CW"ipv6"\fR.
.Sp
This returns when attempting to set an invalid family or attempting
to set \f(CW"ipv6"\fR when the Socket module is less than version 1.94
or IPv6 is not supported.
.Sp
Note, Net::SSH2 does not support IPv6 natively, so setting \f(CW"ipv6"\fR
requires IO::Socket::IP be installed.
.IP "\fBfhopen\fR \- use already open filehandle for I/O" 4
.IX Item "fhopen - use already open filehandle for I/O"
.Vb 1
\&    $ok = $obj\->fhopen($fh);
.Ve
.Sp
This method associates the open filehandle \fI\f(CI$fh\fI\fR with \fI\f(CI$obj\fI\fR for
further I/O.  Filehandle \fI\f(CI$fh\fI\fR must already be opened.
.Sp
To support IPv6 in Net::SSH2, you need to open an IO::Socket::IP object
and pass that to \f(CW\*(C`connect()\*(C'\fR.  In this modules, Net::SSH2::Cisco takes
care of IPv6 for you with the \f(CW\*(C`family()\*(C'\fR method by essentially doing
the same thing in the background.  If for some reason you're dropping
this into existing code, you may already create your own \s-1IO\s0 object, so
this allows for those existing instances.
.IP "\fBhost\fR \- name or \s-1IP\s0 address of remote host" 4
.IX Item "host - name or IP address of remote host"
.Vb 1
\&    $host = $obj\->host;
\&
\&    $host = $obj\->host($host);
.Ve
.Sp
This method designates the remote host for \f(CW\*(C`open()\*(C'\fR.  It is either a
hostname or an \s-1IP\s0 address.  With no argument it returns the current
value set in the object.  With an argument it sets the current host
name to \fI\f(CI$host\fI\fR.  Use \f(CW\*(C`family()\*(C'\fR to control which \s-1IP\s0 address family,
IPv4 or IPv6, hostnames should resolve to.
.Sp
It may also be set by \f(CW\*(C`new()\*(C'\fR or \f(CW\*(C`connect()\*(C'\fR.
.IP "\fBignore_warnings\fR \- Don't call \fIerror()\fR for warnings" 4
.IX Item "ignore_warnings - Don't call error() for warnings"
.Vb 1
\&    $mode = $obj\->ignore_warnings;
\&
\&    $mode = $obj\->ignore_warnings($mode);
.Ve
.Sp
Not all strings that begin with a '%' are really errors. Some are just
warnings. By setting this, you are ignoring them.
.IP "\fBinput_log\fR \- log all input" 4
.IX Item "input_log - log all input"
.Vb 1
\&    $fh = $obj\->input_log;
\&
\&    $fh = $obj\->input_log($fh);
\&
\&    $fh = $obj\->input_log($filename);
.Ve
.Sp
This method starts or stops logging of input.  This is useful when
debugging.  Also see \f(CW\*(C`dump_log()\*(C'\fR.  Because most command interpreters
echo back commands received, it's likely all your output will also be
in this log.  Note that input logging occurs after newline
translation.  See \f(CW\*(C`binmode()\*(C'\fR for details on newline translation.
.Sp
If no argument is given, the log filehandle is returned.  A returned
empty string indicates logging is off.
.Sp
To stop logging, use an empty string as an argument.  The stopped
filehandle is not closed.
.Sp
If an open filehandle is given, it is used for logging and returned.
Otherwise, the argument is assumed to be the name of a file, the
filename is opened for logging and a filehandle to it is returned.  If
the filehandle is not already opened or the filename can't be opened
for writing, the error mode action is performed.
.Sp
\&\fB\s-1NOTE:\s0\fR Logging starts \fIafter\fR login so the initial login sequence 
(i.e., banner, username and password exchange) is \fInot\fR captured.  This 
is due to Net::SSH2 not having a logging function.
.IP "\fBinput_record_separator\fR \- input line delimiter" 4
.IX Item "input_record_separator - input line delimiter"
.Vb 1
\&    $char = $obj\->input_record_separator;
\&
\&    $char = $obj\->input_record_separator($char);
.Ve
.Sp
This method designates the line delimiter for input.  It's used with
\&\f(CW\*(C`cmd()\*(C'\fR to determine lines in the input.
.Sp
With no argument this method returns the current input record
separator set in the object.  With an argument it sets the input
record separator to \fI\f(CI$char\fI\fR.  Note that \fI\f(CI$char\fI\fR must have length.
.Sp
Alias:  \f(CW\*(C`rs\*(C'\fR.
.IP "\fBios_break\fR \- send a break (control\-^)" 4
.IX Item "ios_break - send a break (control-^)"
.Vb 1
\&    $ok = $obj\->ios_break;
\&
\&    $ok = $obj\->ios_break($char);
.Ve
.Sp
Send an \s-1IOS\s0 break.  This is sent without a newline.  Optional \fI\f(CI$char\fI\fR
appends.  For example, no argument sends \*(L"Control\-^\*(R".  Argument \*(L"X\*(R"
effectively sends \*(L"Control\-Shift\-6\-X\*(R".
.IP "\fBis_enabled\fR \- enable mode check" 4
.IX Item "is_enabled - enable mode check"
.Vb 1
\&    $ok = $obj\->is_enabled;
.Ve
.Sp
A trivial check to see whether we have a root-style prompt, with
either the word \*(L"(enable)\*(R" in it, or a trailing \*(L"#\*(R".
.Sp
\&\fBWarning\fR: this method will return false positives if the prompt has
\&\*(L"#\*(R"s in it.  You may be better off calling \f(CW\*(C`$obj\->cmd("show
privilege")\*(C'\fR instead.
.IP "\fBlast_cmd\fR \- last command entered" 4
.IX Item "last_cmd - last command entered"
.Vb 1
\&    $cmd = $obj\->last_cmd;
.Ve
.Sp
This method returns the last command executed by \f(CW\*(C`cmd()\*(C'\fR.
.IP "\fBlast_prompt\fR \- last prompt read" 4
.IX Item "last_prompt - last prompt read"
.Vb 1
\&    $prompt = $obj\->last_prompt;
.Ve
.Sp
This method returns the last prompt read by \f(CW\*(C`cmd()\*(C'\fR.  See \f(CW\*(C`prompt()\*(C'\fR.
.IP "\fBlogin\fR \- login to a router" 4
.IX Item "login - login to a router"
.Vb 1
\&    $ok = $obj\->login($username, $password);
\&
\&    $ok = $obj\->login(
\&        [Name     => $username,]
\&        [Password => $password,]
\&        [Timeout  => $secs,]
\&    );
.Ve
.Sp
This method performs a login with Net::SSH2 authentication methods.
Currenly, only \f(CW\*(C`auth_password\*(C'\fR is supported.
.Sp
Upon successful connection, a Net::SSH2::Channel object is created and:
.RS 4
.IP "\(bu" 2
\&\f(CW\*(C`blocking()\*(C'\fR is called on the channel
.IP "\(bu" 2
\&\f(CW\*(C`shell()\*(C'\fR from Net::SSH2::Channel is opened
.IP "\(bu" 2
\&\f(CW\*(C`binmode()\*(C'\fR is called on the channel
.IP "\(bu" 2
The first prompt (see \f(CW\*(C`prompt()\*(C'\fR)is read off.
.RE
.RS 4
.Sp
Must be connected by calling \f(CW\*(C`new\*(C'\fR or \f(CW\*(C`connect\*(C'\fR first.
.RE
.IP "\fBmax_buffer_length\fR \- maximum size of input buffer" 4
.IX Item "max_buffer_length - maximum size of input buffer"
.Vb 1
\&    $len = $obj\->max_buffer_length;
\&
\&    $prev = $obj\->max_buffer_length($len);
.Ve
.Sp
This method designates the maximum size of the input buffer.
.Sp
With no argument, this method returns the current maximum buffer
length set in the object.  With an argument it sets the maximum buffer
length to \fI\f(CI$len\fI\fR.  Values of \fI\f(CI$len\fI\fR smaller than 512 will be adjusted
to 512.
.Sp
A warning is printed to \s-1STDERR\s0 when attempting to set this attribute
to something that isn't a positive integer.
.IP "\fBmore_prompt\fR \- Matchop used by \fIautopage()\fR" 4
.IX Item "more_prompt - Matchop used by autopage()"
.Vb 1
\&    $matchop = $obj\->prompt;
\&
\&    $matchop = $obj\->prompt($matchop);
.Ve
.Sp
Match prompt for paging used by \f(CW\*(C`autopage()\*(C'\fR.
.IP "\fBnormalize_cmd\fR \- Turn normalization on and off" 4
.IX Item "normalize_cmd - Turn normalization on and off"
.Vb 1
\&    $mode = $obj\->normalize_cmd;
\&
\&    $mode = $obj\->normalize_cmd($mode);
.Ve
.Sp
\&\s-1IOS\s0 clears '\-\-More\-\-' prompts with backspaces (e.g., ^H). If 
you're excited by the thought of having raw control characters 
like ^H (backspace), ^? (delete), and ^U (kill) in your command 
output, turn this feature off.
.Sp
Logging is unaffected by this setting.
.Sp
See \f(CW\*(C`waitfor_clear()\*(C'\fR
.IP "\fBopen\fR \- connect to port on remote host" 4
.IX Item "open - connect to port on remote host"
See \f(CW\*(C`connect()\*(C'\fR.
.IP "\fBoutput_field_separator\fR \- field separator for print" 4
.IX Item "output_field_separator - field separator for print"
.Vb 1
\&    $chars = $obj\->output_field_separator;
\&
\&    $prev = $obj\->output_field_separator($chars);
.Ve
.Sp
This method designates the output field separator for \f(CW\*(C`print()\*(C'\fR.
Ordinarily the print method simply prints out the comma separated
fields you specify.  Set this to specify what's printed between
fields.
.Sp
With no argument this method returns the current output field
separator set in the object.  With an argument it sets the output
field separator to \fI\f(CI$chars\fI\fR.
.Sp
Alias:  \f(CW\*(C`ofs()\*(C'\fR
.IP "\fBoutput_log\fR \- log all output" 4
.IX Item "output_log - log all output"
.Vb 1
\&    $fh = $obj\->output_log;
\&
\&    $fh = $obj\->output_log($fh);
\&
\&    $fh = $obj\->output_log($filename);
.Ve
.Sp
This method starts or stops logging of output.  This is useful when
debugging.  Also see \f(CW\*(C`dump_log()\*(C'\fR.  Because most command interpreters
echo back commands received, it's likely all your output would also be
in an input log.  See \f(CW\*(C`input_log()\*(C'\fR.  Note that output logging occurs
before newline translation.  See \f(CW\*(C`binmode()\*(C'\fR for details on newline
translation.
.Sp
If no argument is given, the log filehandle is returned.  A returned
empty string indicates logging is off.
.Sp
To stop logging, use an empty string as an argument.  The stopped
filehandle is not closed.
.Sp
If an open filehandle is given, it is used for logging and returned.
Otherwise, the argument is assumed to be the name of a file, the
filename is opened for logging and a filehandle to it is returned.  If
the filehandle is not already opened or the filename can't be opened
for writing, the error mode action is performed.
.Sp
\&\fB\s-1NOTE:\s0\fR Logging starts \fIafter\fR login so the initial login sequence 
(i.e., banner, username and password exchange) is \fInot\fR captured.  This 
is due to Net::SSH2 not having a logging function.
.IP "\fBoutput_record_separator\fR \- output line delimiter" 4
.IX Item "output_record_separator - output line delimiter"
.Vb 1
\&    $char = $obj\->output_record_separator;
\&
\&    $char = $obj\->output_record_separator($char);
.Ve
.Sp
This method designates the output line delimiter for \f(CW\*(C`cmd()\*(C'\fR.
.Sp
The output record separator is set to \f(CW"\en"\fR by default, so there's
no need to append all your commands with a newline.
.Sp
With no argument this method returns the current output record
separator set in the object.  With an argument it sets the output
record separator to \fI\f(CI$char\fI\fR.
.Sp
Alias:  \f(CW\*(C`ors()\*(C'\fR.
.IP "\fBport\fR \- remote port" 4
.IX Item "port - remote port"
.Vb 1
\&    $port = $obj\->port;
\&
\&    $port = $obj\->port($port);
.Ve
.Sp
This method designates the remote \s-1TCP\s0 port for \f(CW\*(C`open()\*(C'\fR.  With no
argument this method returns the current port number.  With an
argument it sets the current port number to \fI\f(CI$port\fI\fR.
.IP "\fBprint\fR \- write to object" 4
.IX Item "print - write to object"
.Vb 1
\&    $ok = $obj\->print(@list);
.Ve
.Sp
This method writes \fI\f(CI@list\fI\fR followed by the \fIoutput_record_separator\fR
to the open object and returns \f(CW1\fR if all data was successfully
written.  On time-out or other failures, the error mode action is
performed.  See \f(CW\*(C`errmode()\*(C'\fR.
.Sp
By default, the \f(CW\*(C`output_record_separator()\*(C'\fR is set to \f(CW"\en"\fR so all
your commands automatically end with a newline.  In most cases your
output is being read by a command interpreter which won't accept a
command until newline is read.  This is similar to someone typing a
command and hitting the return key.  To avoid printing a trailing
\&\f(CW"\en"\fR use \f(CW\*(C`put()\*(C'\fR instead or set the output_record_separator to an
empty string.
.Sp
You may also use the output field separator to print a string between
the list elements.  See \f(CW\*(C`output_field_separator()\*(C'\fR.
.IP "\fBprompt\fR \- pattern to match a prompt" 4
.IX Item "prompt - pattern to match a prompt"
.Vb 1
\&    $matchop = $obj\->prompt;
\&
\&    $matchop = $obj\->prompt($matchop);
.Ve
.Sp
This method sets the pattern used to find a prompt in the input
stream.  It must be a string representing a valid perl pattern match
operator.  The methods \f(CW\*(C`login()\*(C'\fR and \f(CW\*(C`cmd()\*(C'\fR try to read until
matching the prompt.  They will fail if the pattern you've chosen
doesn't match what the remote side sends.
.Sp
With no argument this method returns the prompt set in the object.
With an argument it sets the prompt to \fI\f(CI$matchop\fI\fR.
.Sp
For an explanation of the default prompt, see Net::Telnet::Cisco.
.Sp
For an explanation of valid prompts and creating match operators,
see Net::Telnet.
.IP "\fBput\fR \- write to object" 4
.IX Item "put - write to object"
.Vb 1
\&    $ok = $obj\->put($string);
\&
\&    $ok = $obj\->put(
\&        String      => $string,
\&        [Binmode    => $mode,]
\&        [Errmode    => $errmode,]
\&        [Timeout    => $secs,]
\&    );
.Ve
.Sp
This method writes \fI\f(CI$string\fI\fR to the opened object and returns \f(CW1\fR if
all data was successfully written.  This method is like \f(CW\*(C`print()\*(C'\fR
except that it doesn't write the trailing output_record_separator
(\*(L"\en\*(R" by default).  On time-out or other failures, the error mode
action is performed.  See \f(CW\*(C`errmode()\*(C'\fR.
.IP "\fBsend_wakeup\fR \- send a newline to the router at login time" 4
.IX Item "send_wakeup - send a newline to the router at login time"
.Vb 1
\&    $when = $obj\->send_wakeup;
\&
\&    $when = $obj\->send_wakeup(\*(Aqconnect\*(Aq);
\&    $when = $obj\->send_wakeup(\*(Aqtimeout\*(Aq);
\&    $when = $obj\->send_wakeup(0);
.Ve
.Sp
This is provided only for compatibility with drop-in replacement 
in Net::Telnet::Cisco scripts.  This has no functionality in this 
module.
.Sp
Some routers quietly allow you to connect but don't display the
expected login prompts. This \fIwould\fR send a newline in the hopes 
it spurs the routers to print something.
.Sp
The issue is a Net::SSH2::Channel to send the newline over isn't 
opened until \fIafter\fR login.
.IP "\fBsock\fR \- return underlying socket object" 4
.IX Item "sock - return underlying socket object"
.Vb 1
\&    $sock = $obj\->sock;
.Ve
.Sp
Returns the underlying IO::Socket (::INET or ::IP) object for the Net::SSH2
connection or undefined if not yet connected.  This allows for socket
accessors to be called.
.Sp
For example:
.Sp
.Vb 1
\&    printf "Connected to %s:%s\en", $obj\->sock\->peerhost, $obj\->sock\-peerport;
.Ve
.IP "\fBssh2\fR \- return Net::SSH2 object" 4
.IX Item "ssh2 - return Net::SSH2 object"
.Vb 1
\&    $ssh2 = $obj\->ssh2;
.Ve
.Sp
Returns the Net::SSH2 object created by \f(CW\*(C`connect()\*(C'\fR.
.IP "\fBssh2_chan\fR \- return Net::SSH2::Channel object" 4
.IX Item "ssh2_chan - return Net::SSH2::Channel object"
.Vb 1
\&    $chan = $obj\->ssh2_chan;
.Ve
.Sp
Returns the Net::SSH2::Channel object created by \f(CW\*(C`login()\*(C'\fR.
.IP "\fBtimed_out\fR \- time-out indicator" 4
.IX Item "timed_out - time-out indicator"
.Vb 1
\&    $to = $obj\->timed_out;
.Ve
.Sp
This method indicates if a previous read, write, or open method
timed-out.
.IP "\fBtimeout\fR \- I/O time-out interval" 4
.IX Item "timeout - I/O time-out interval"
.Vb 1
\&    $secs = $obj\->timeout;
\&
\&    $secs = $obj\->timeout($secs);
.Ve
.Sp
This method sets the timeout interval used when performing I/O
or connecting to a port.
.Sp
If \fI\f(CI$secs\fI\fR is \f(CW0\fR then time-out occurs if the data cannot be
immediately read or written.
.Sp
With no argument this method returns the timeout set in the object.
With an argument it sets the timeout to \fI\f(CI$secs\fI\fR.
.IP "\fBwaitfor\fR \- wait for pattern in the input" 4
.IX Item "waitfor - wait for pattern in the input"
.Vb 9
\&    $ok = $obj\->waitfor($matchop);
\&    $ok = $obj\->waitfor(
\&        [Match   => $matchop,]
\&        [String  => $string,]
\&        [Binmode => $mode,]
\&        [Errmode => $errmode,]
\&        [Timeout => $secs,]
\&        [Waitfor_clear => $mode,]
\&    );
\&
\&    ($prematch, $match) = $obj\->waitfor($matchop);
\&    ($prematch, $match) = $obj\->waitfor(
\&        [Match   => $matchop,]
\&        [String  => $string,]
\&        [Binmode => $mode,]
\&        [Errmode => $errmode,]
\&        [Timeout => $secs,]
\&        [Waitfor_clear => $mode,]
\&    );
.Ve
.Sp
This method reads until a pattern match or string is found in the
input stream.  All the characters before and including the match are
removed from the input stream.
.Sp
In a list context the characters before the match and the matched
characters are returned in \fI\f(CI$prematch\fI\fR and \fI\f(CI$match\fI\fR.  In a scalar
context, the matched characters and all characters before it are
discarded and \f(CW1\fR is returned on success.  On time-out, eof, or other
failures, for both list and scalar context, the error mode action is
performed.  See \f(CW\*(C`errmode()\*(C'\fR.
.Sp
You can specify more than one pattern or string by simply providing
multiple \fIMatch\fR and/or \fIString\fR named parameters.  A \fI\f(CI$matchop\fI\fR
must be a string representing a valid Perl pattern match operator.
The \fI\f(CI$string\fI\fR is just a substring to find in the input stream.
.IP "\fBwaitfor_clear\fR \- clear read buffer in \fIwaitfor()\fR" 4
.IX Item "waitfor_clear - clear read buffer in waitfor()"
.Vb 1
\&    $mode = $obj\->waitfor_clear;
\&
\&    $mode = $obj\->waitfor_pause($mode);
.Ve
.Sp
This issues an \f(CW\*(C`ios_break\*(C'\fR with \*(L"Z\*(R" (i.e., CTRL-Z) after a \f(CW\*(C`waitfor()\*(C'\fR 
timeout and performs a \f(CW\*(C`flush()\*(C'\fR on the Net::SSH::Channel before the 
\&\f(CW\*(C`read()\*(C'\fR.  This tries to compensate for a call to \f(CW\*(C`waitfor\*(C'\fR that times 
out and potentially leaves stuff in the channel.  For best effect, this 
should be set at an object property in \f(CW\*(C`new()\*(C'\fR, but can be set on a 
local basis in \f(CW\*(C`cmd()\*(C'\fR and \f(CW\*(C`waitfor()\*(C'\fR.
.Sp
The default is '1' \- meaning on.  This complements the behavior 
of \f(CW\*(C`normalize_cmd()\*(C'\fR.
.Sp
Why do this?  For example, \*(L"show running-config\*(R" takes time while \*(L"Building 
configuration...\*(R" and that may time out if a \fItimeout\fR is set too 
small.  But in non-blocking mode, the output may start and fill the 
channel after the return from \f(CW\*(C`waitfor\*(C'\fR and if terminal length is a finite 
value \- like the default 24 \- a '\s-1MORE\s0' prompt is waiting \- regardless of 
whether \f(CW\*(C`autopage\*(C'\fR is enabled.
.Sp
To address the possible above scenario, we can send an \f(CW\*(C`ios_break\*(C'\fR with 
\&\*(L"Z\*(R" (i.e., CTRL-Z) to cancel the '\s-1MORE\s0' prompt.  Otherwise, the first 
character of the subsequent command (usually from \f(CW\*(C`cmd()\*(C'\fR) will 
\&\*(L"satisfy\*(R" the \s-1MORE\s0 prompt, \*(L"disappear\*(R" from the output and potentially 
cause a router error (% Invalid input detected at ...).  See the following 
example:
.Sp
.Vb 2
\&  R1#sh run
\&  "Building configuration..."
.Ve
.Sp
\&\s-1TIMEOUT OCCUR\s0!  However, non-blocking mode allows output to fill buffer 
in the background up to a '\s-1MORE\s0' prompt:
.Sp
.Vb 9
\&  Current configuration : 9721 bytes
\&  !
\&  upgrade fpd auto
\&  version 12.4
\&  no service pad
\&  [... output truncated ...]
\&  clock summer\-time EDT recurring
\&  no ip source\-route
\&   \-\-More\-\-
.Ve
.Sp
The buffer now has the above in it.  The next command \*(L"show version\*(R" is 
issued and the following happens:
.Sp
.Vb 3
\&  R1#how version
\&      ^
\&  % Invalid input detected at \*(Aq^\*(Aq marker.
.Ve
.Sp
Where did the \*(L"s\*(R" in \*(L"show version\*(R" go?  It \*(L"satisfied\*(R" the '\s-1MORE\s0' prompt 
and returned the regular router prompt where the rest of the command \*(L"how 
version\*(R" was entered, run and generated an error.  You can see this for 
yourself at a router console by trying:
.Sp
.Vb 4
\&  terminal length 24
\&  show run
\&  [DO NOT PRESS SPACE OR ENTER AT THE \-\-MORE\-\- PROMPT]
\&  show version
.Ve
.Sp
Alternatively, try this, which is what \f(CW\*(C`waitfor_clear\*(C'\fR effectively does:
.Sp
.Vb 5
\&  terminal length 24
\&  show run
\&  [DO NOT PRESS SPACE OR ENTER AT THE \-\-MORE\-\- PROMPT]
\&  [PRESS CTRL\-Z KEY COMBINATION]
\&  show version
.Ve
.IP "\fBwaitfor_pause\fR \- insert a small delay before \fIwaitfor()\fR" 4
.IX Item "waitfor_pause - insert a small delay before waitfor()"
.Vb 1
\&    $millisecs = $obj\->waitfor_pause;
\&
\&    $millisecs = $obj\->waitfor_pause($millisecs);
.Ve
.Sp
There is a timing issue between \s-1SSH\s0 \fIwrite()\fR and \fIread()\fR manifested in 
\&\f(CW\*(C`cmd()\*(C'\fR and \f(CW\*(C`enable\*(C'\fR.  This adds a slight delay after sending the 
command and before reading the result to compensate.  You should not 
have to change the default.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
See the \fB\s-1EXAMPLES\s0\fR sections of both Net::Telnet and Net::Telnet::Cisco.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::SSH2, Net::Telnet, Net::Telnet::Cisco
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
\&\fBJay Rogers\fR \- author of Net::Telnet
.PP
\&\fBJoshua Keroes\fR \- author of Net::Telnet::Cisco
.PP
\&\fBDavid B. Robins\fR \- author of Net::SSH2
.PP
Without all of their excellent work, this would not be possible.
.SH "LICENSE"
.IX Header "LICENSE"
This software is released under the same terms as Perl itself.
If you don't know what that means visit <http://perl.com/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) Michael Vincent 2015
.PP
<http://www.VinsWorld.com>
.PP
All rights reserved
