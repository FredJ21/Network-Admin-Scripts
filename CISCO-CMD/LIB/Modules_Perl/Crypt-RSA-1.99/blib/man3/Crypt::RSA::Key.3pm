.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::RSA::Key 3"
.TH Crypt::RSA::Key 3 "2009-06-07" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::RSA::Key \- RSA Key Pair Generator.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    my $keychain = new Crypt::RSA::Key;
\&    my ($public, $private) = $keychain\->generate ( 
\&                              Identity  => \*(AqLord Macbeth <macbeth@glamis.com>\*(Aq,
\&                              Size      => 2048,  
\&                              Password  => \*(AqA day so foul & fair\*(Aq, 
\&                              Verbosity => 1,
\&                             ) or die $keychain\->errstr();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a method to generate an \s-1RSA\s0 key pair.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
Constructor.
.SS "\fIgenerate()\fP"
.IX Subsection "generate()"
\&\fIgenerate()\fR generates an \s-1RSA\s0 key of specified bitsize. It returns a list of
two elements, a Crypt::RSA::Key::Public object that holds the public part
of the key pair and a Crypt::RSA::Key::Private object that holds that
private part. On failure, it returns undef and sets \f(CW$self\fR\->errstr to
appropriate error string. \fIgenerate()\fR takes a hash argument with the
following keys:
.IP "\fBSize\fR" 4
.IX Item "Size"
Bitsize of the key to be generated. This should be an even integer > 48.
Bitsize is a mandatory argument.
.IP "\fBPassword\fR" 4
.IX Item "Password"
String with which the private key will be encrypted. If Password is not
provided the key will be stored unencrypted.
.IP "\fBIdentity\fR" 4
.IX Item "Identity"
A string that identifies the owner of the key. This string usually takes
the form of a name and an email address. The identity is not bound to the
key with a signature. However, a future release or another module will
provide this facility.
.IP "\fBCipher\fR" 4
.IX Item "Cipher"
The block cipher which is used for encrypting the private key. Defaults to
`Blowfish'. Cipher could be set to any value that works with \fICrypt::CBC\fR\|(3)
and \fITie::EncryptedHash\fR\|(3).
.IP "\fBVerbosity\fR" 4
.IX Item "Verbosity"
When set to 1, \fIgenerate()\fR will draw a progress display on \s-1STDOUT.\s0
.IP "\fBFilename\fR" 4
.IX Item "Filename"
The generated key pair will be written to disk, in \f(CW$Filename\fR.public and
\&\f(CW$Filename\fR.private files, if this argument is provided. Disk writes can be
deferred by skipping this argument and achieved later with the \fIwrite()\fR
method of \fICrypt::RSA::Key::Public\fR\|(3) and \fICrypt::RSA::Key::Private\fR\|(3).
.IP "\fB\s-1KF\s0\fR" 4
.IX Item "KF"
A string that specifies the key format. As of this writing, two key
formats, `Native' and `\s-1SSH\s0', are supported. \s-1KF\s0 defaults to `Native'.
.IP "\fB\s-1SKF\s0\fR" 4
.IX Item "SKF"
Secret (Private) Key Format. Instead of specifying \s-1KF,\s0 the user could
choose to specify secret and public key formats separately. The value for
\&\s-1SKF\s0 can be a string (\*(L"Native\*(R" or \*(L"\s-1SSH\*(R"\s0) or a hash reference that specifies
a module name, its constructor and constructor arguments. The specified
module is loaded with \fIClass::Loader\fR\|(3) and must be interface compatible
with \fICrypt::RSA::Key::Private\fR\|(3).
.IP "\fB\s-1PKF\s0\fR" 4
.IX Item "PKF"
Public Key Format. This option is like \s-1SKF\s0 but for the public key.
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
See \fB\s-1ERROR HANDLING\s0\fR in \fICrypt::RSA\fR\|(3) manpage.
.SH "BUGS"
.IX Header "BUGS"
There's an inefficiency in the way \fIgenerate()\fR ensures the key pair is
exactly Size bits long. This will be fixed in a future release.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vipul Ved Prakash, <mail@vipul.net>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fICrypt::RSA\fR\|(3), \fICrypt::RSA::Key::Public\fR\|(3), \fICrypt::RSA::Key::Private\fR\|(3), 
\&\fICrypt::Primes\fR\|(3), \fITie::EncryptedHash\fR\|(3), \fIClass::Loader\fR\|(3)
